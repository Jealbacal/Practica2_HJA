/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poker.practica2.hja.GUI;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;


/**
 *
 * @author jjcar
 */
public class RangeGrid extends javax.swing.JPanel {
    
    private final static int _size = 14;
    private ArrayList<PairButton> button_list;
    private ArrayList<PairButton> sel_button_list;
    

    /**
     * Creates new form RangeGrid
     */
    public RangeGrid() {
        button_list = new ArrayList<>();
        sel_button_list = new ArrayList<>();
        initComponents();
        createButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(13, 13));
    }// </editor-fold>//GEN-END:initComponents


    //Crea la matriz de botones que van a representar el rango.
    // Y los mete en un ArrayList para gestionarlos.
    private void createButtons(){
        
        //Recorre la tabla
        for (int i = _size; i >= 2; i-- ){
            for(int j = _size; j >= 2; j--){
                
                //Creacion del boton y atributos
                PairButton pair = new PairButton();
                pair.addActionListener(pair);
                
                //Botones de las Parejas
                if( i == j ){

                    pair.setType(Type.PAIR);
                    
                    pair.setText(rangeButtonText(i) + 
                            rangeButtonText(j));
                    pair.setPairColor();
                    
                }
                // Botones de las cartas Suited
                else if ( i > j ){
                    
                     pair.setType(Type.SUITED);
                    
                    pair.setText(rangeButtonText(i) + 
                            rangeButtonText(j) +
                            "s");
                    pair.setSuitedColor();
                }
                // Botones de las cartas Offsuit
                else if( i < j ){
                    
                     pair.setType(Type.OFF_SUIT);
                    
                    pair.setText(rangeButtonText(j) + 
                            rangeButtonText(i) +
                            "o");
                    pair.setOffSuitColor();
                    //pair.setForeground(Color.WHITE);
                }
                
                //Añade a la gui
                add(pair);
                // Añade al array
                button_list.add(pair);
                
            }
        }
    }
    
    // Metodo para escribir el texto de las cartas en el boton dado un interador
    private String rangeButtonText(int i){
        
        String text = "";
        
        switch(i){
            case 14:
                text += "A";
                break;
            case 13:
                text += "K";
                break;
            case 12:
                text += "Q";
                break;
            case 11:
                text += "J";
                break;
            case 10:
                text += "T";
                break;
            default:
                text += Integer.toString(i);
                break;
                
        }
        
        return text;
    }
    
    // Devuelve el texto del boton
    public String getPairText(int i){
        return button_list.get(i).getText();
    }
    
    //Limpia la tabla de botones seleccionados
    public void clear(){
        for (PairButton b : button_list){
            if(b.isSelected()){
                b.setSelected(false);
                b.setColor(b.getType());
                sel_button_list.clear();
            }
        }
    }
    
    //Metodo que busca el boton dado un texto y lo selecciona
    public void searchButton(String text){
        
        int i = 0;
        int n = button_list.size();
        boolean found = false;
        
        while(i < n && !found){
            if(button_list.get(i).getText().equals(text)){
                found = true;
                selectButton(button_list.get(i));
            }else{
                i++;
            }
        }
        
    }
    
    //Selecciona un boton
    private void selectButton(PairButton b){
        b.setSelected(true);
        b.setSelectedColor();
        sel_button_list.add(b);
    }
    
    public void checkSelected(){
        for(PairButton b : button_list){
            if(b.isSelected()){
                sel_button_list.add(b);
            }else{
                sel_button_list.remove(b);
            }
        }
    }
    
    public ArrayList<String> getSelButtonList(){
        
        ArrayList<String> list = new ArrayList<String>();
        
        for( PairButton b : sel_button_list){
            list.add(b.getText());
        }
        
        return list;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
